# main_app.py
import os
os.environ['DISPLAY'] = ':0'  # to run the code from ssh but show on the monitor

import numpy as np 
import matplotlib.pyplot as plt
from datetime import datetime
import os
from scipy.signal import chirp, resample, stft, butter, filtfilt
from scipy.fft import fft
from tkinter import ttk, filedialog, messagebox


def plot_fft_stft(timestamps, waveform, run_time, freq=44100, ns=1024*2):

    # Find frequency from timestamps
    freq = int(len(timestamps) / timestamps[-1])
    print(freq)
    overlap = ns // 2

    # Calculate STFT
    f, t, Zxx = stft(waveform, freq, noverlap=overlap, nperseg=ns, window='hann')

    # Calculate FFT
    n = len(waveform)
    f_fft = np.fft.fftfreq(n, d=1/freq)
    Y = fft(waveform)
    magnitude_spectrum = 2.0 / n * np.abs(Y[:n // 2])

    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(10, 5), sharey=True, gridspec_kw={"width_ratios": [2, 1]})

    # Plot FFT
    ax2.fill_betweenx(f_fft[:n // 2], 0, magnitude_spectrum, color='#440154', alpha=1)
    ax2.set_ylim((1, 500))
    ax2.set_xlim((0.0001, 0.3))
    ax2.set_xscale('log')  # Set x-axis to log scale
    ax2.set_yscale('log')  # Set y-axis to log scale

    ax2.set_title('Full-time FFT')
    ax2.set_xlabel('Magnitude')

    # Plot STFT
    ax1.pcolormesh(t, f, np.abs(Zxx), shading='auto', cmap='viridis')  # , vmin=0, vmax=0.025
    ax1.set_ylim((0, 500))
    ax1.set_yscale('log')  # Set y-axis to log scale

    ax1.set_title('Short-time FFT')
    ax1.set_ylabel('Frequency [Hz]')
    ax1.set_xlabel('Time [sec]')

    plt.tight_layout()
    plt.savefig(os.path.join(run_time, 'fft_stft_plot.png'))
    plt.show()


def low_pass_filter(data, cutoff_freq, fs, order=5):
    nyquist = 0.5 * fs
    normal_cutoff = cutoff_freq / nyquist
    b, a = butter(order, normal_cutoff, btype='low', analog=False)
    filtered_data = filtfilt(b, a, data)
    return filtered_data


def load_and_plot_numpy():
    # file_path = '/home/cslab/Desktop/Jul 22/box5cm_sand_notpacked_150g mass 465g total/08-05_16-24-45_1cm ID 7cm acc/accelerometer_data.npy'  # filedialog.askopenfilename(filetypes=[("Numpy files", "*.npy")])
    file_path = filedialog.askopenfilename(filetypes=[("Numpy files", "*.npy")])

    if file_path:
        data = np.load(file_path)
        timestamps = data[0]
        z_data = data[1]
        run_time = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')
        os.makedirs(run_time, exist_ok=True)
        
        fs = int(len(timestamps) / timestamps[-1])  # Sampling frequency
        cutoff_freq = 50  # Cutoff frequency for low-pass filter

        # Apply low-pass filter
        filtered_z_data = low_pass_filter(z_data, cutoff_freq, fs)

        # Save filtered data
        filtered_data_path = os.path.join(os.path.dirname(file_path), 'filtered_accelerometer_data.npy')
        np.save(filtered_data_path, np.vstack((timestamps, filtered_z_data)))

        # Plot original and filtered data
        plot_fft_stft(timestamps, z_data, run_time)
        plot_fft_stft(timestamps, filtered_z_data, run_time)


load_and_plot_numpy()
